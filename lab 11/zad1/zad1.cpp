#include <iostream>//подключение библиотек
using namespace std;//чтобы не писать каждый раз std
int main()//объявляем главную функцию
{
	setlocale(LC_ALL, "ru");//покдлючаем русскую клавиатуру
	char tmp[33];//массив для хранения двоичного представления чисел
	int A, B, maskA = 240;//объявляем переменные A, B и маску для A
	int maskB = ~maskA >> 1;//создаем маску для B путем инвертирования маски A и сдвига на один бит вправо
	cout << "Введите число A=";//вводим число А
	cin >> A;
	cout << "Введите число B=";//вводим число В
	cin >> B;
	_itoa_s(A, tmp, 2);//преобразуем число A в двоичную форму и сохраняем в tmp
	cout << "A=" << tmp << endl;//преобразуем число A в двоичную форму и сохраняем в tmp
	_itoa_s(B, tmp, 2);//преобразуем число B в двоичную форму и сохраняем в tmp
	cout << "B=" << tmp << endl;//преобразуем число В в двоичную форму и сохраняем в tmp
	_itoa_s(maskA, tmp, 2);//преобразуем маску для A в двоичную форму и сохраняем в tmp
	cout << "Маска для A: " << tmp << endl;//выводим двоичное представление маски для A
	_itoa_s((A & maskA) >> 4, tmp, 2);//выделяем биты из числа A с помощью маски и сдвигаем на 4 бита вправо. Затем преобразуем результат в двоичную форму и сохраняем в tmp
	cout << "Выделенные биты A: " << tmp << endl;//выводим выделенные биты числа A
	_itoa_s(maskB, tmp, 2);//преобразуем маску для B в двоичную форму и сохраняем в tmp
	cout << "Маска для B: " << tmp << endl;//выводим двоичное представление маски для B
	_itoa_s(B & maskB, tmp, 2);//очищаем биты в числе B с помощью маски. Затем преобразуем результат в двоичную форму и сохраняем в tmp
	cout << "Очищены биты в B: " << tmp << endl;//выводим число B после очистки битов
	_itoa_s(((B & maskB) | ((A & maskA) >> 4)), tmp, 2);//очищаем биты в числе B и устанавливаем выделенные биты из числа A.Затем преобразуем результат в двоичную форму и сохраняем в tmp
	cout << "Результат B=" << tmp << endl;//выводим конечный результат B
}