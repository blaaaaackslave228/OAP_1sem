#include <iostream>//подключение библиотеки
using namespace std;//чтобы не писать каждый раз std
int main()//объявляем функцию
{
	setlocale(LC_ALL, "RU");//покдлючаем русскую клавиатуру
	char tmp[33];//массив для хранения двоичного представления чисел
	int A, B;//объявляем переменные A, B
	int n, p, m, q;//объявляем переменные
	cout << "Введите число A=";
	cin >> A;//вводим число А
	cout << "Введите число B=";
	cin >> B;//вводим число В
	cout << "Введите количество бит для установки(n): ";//вводим количество бит для установки
	cin >> n;
	cout << "Введите позицию (p) с которой установить биты в числе A: ";//вводим позицию p с которой установить биты в числе А
	cin >> p;
	cout << "Введите количество битов m, которые необходимо заменить: ";//введите количество битов m
	cin >> m;
	cout << "Введите позицию (q), на место которой нужно провести замену в числе B: ";//введите позицию q, на место которой нужно провести замену
	cin >> q;
	_itoa_s(A, tmp, 2);//преобразуем число A в двоичную форму и сохраняем в tmp
	cout << "A=" << tmp << endl;
	_itoa_s(B, tmp, 2);//преобразуем число B в двоичную форму и сохраняем в tmp
	cout << "B=" << tmp << endl;
	//преобразуем маску для A в двоичную форму и сохраняем в tmp
	int maskA = (1 << n) - 1;
	maskA <<= p;
	_itoa_s(maskA, tmp, 2);
	cout << "Маска для A: " << tmp << endl;
	//преобразуем маску для В в двоичную форму и сохраняем в tmp
	int maskB = (1 << m) - 1;
	maskB <<= q;
	_itoa_s(maskB, tmp, 2);//преобразуем маску для В в двоичную форму и сохраняем в tmp
	cout << "Маска для B: " << tmp << endl;
	A |= maskA;//применение маски maskA к A с помощью операции побитового ИЛИ
	_itoa_s(A, tmp, 2);
	cout << "Выделенные биты A: " << tmp << endl;
	B = (B & ~maskB) | ((A >> p) & maskB);//замена битов в B битами из A
	_itoa_s(A, tmp, 2);//преобразуем число A в двоичную форму и сохраняем в tmp
	cout << "A=" << tmp << endl;
	_itoa_s(B, tmp, 2);//преобразуем число в в двоичную форму и сохраняем в tmp
	cout << "B=" << tmp << endl;//вывод 
}